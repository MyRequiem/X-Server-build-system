#!/bin/bash

# colors
export RED="\033[0;31m"
export MAGENTA="\033[0;35m"
export CYAN="\033[0;36m"
export BROWN="\033[0;33m"
export GREEN="\033[1;32m"
export GREY="\033[0;37m"
export YELLOW="\033[1;33m"
export CDEF="\033[0m"

CWD=$(pwd)

# check current path
SLACKBUILDNAME=$(basename "$0")
if ! [ -r "${CWD}/${SLACKBUILDNAME}" ]; then
    echo -en "${GREEN}${SLACKBUILDNAME} ${RED}can be run from a "
    echo -en "directory${CDEF} "
    dirname "$0"
    exit 1
fi

# check user (only root)
if [[ "$(id -u)" != "0" ]]; then
    echo "$0 can only be run as root"
    exit 1
fi

QUEUE="${CWD}/queue"
QUEUELINES=$(grep ":" "${QUEUE}" | grep -v "#")

# show list available modules for build
show_list_modules() {
    echo -en "${BROWN}Available modules:"
    echo -e "${MAGENTA} $(echo "${QUEUELINES}" | cut -d ":" -f 1 | \
        sort | uniq | tr '\n' ' ')${CDEF}"
}

# show help
show_help() {
    echo -e "${BROWN}Usage:${CDEF} ./$(basename "$0") [module] [package]"
    show_list_modules
    echo "-h, --help    - show this message"
}

src_arch_not_found_mess() {
    echo -en "${RED}Source archive ${CYAN}$1-*.tar.?z*${RED} not found in "
    echo -en "${BROWN}$2/${CDEF}\nSet variable ${BROWN}CHECK_PACKAGE_VERSION="
    echo -en "\"true\" ${CDEF}in ${CYAN}settings.sh\n${CDEF}"
    echo "for download missing source archives."
}

# if count parameters > 2
if [[ $# -gt 2 ]]; then
    show_help
    exit 0
fi

if [[ $# -eq 1 ]]; then
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        show_help
        exit 0
    fi
fi

# check first parameter
if [[ $# -ge 1 ]]; then
    # if no module named $1
    if ! grep -Eq "^$1:" "${QUEUE}"; then
        echo -e "${RED}Module ${MAGENTA}$1 ${RED}not available"
        show_list_modules
        exit 1
    fi
fi

# check second parameter (package name)
if [[ $# -eq 2 ]]; then
    # if package not found in module
    if ! grep -Eq "^$1:$2$" "${QUEUE}"; then
        echo -en "${RED}Package ${CYAN}$2 ${RED}not found in${CDEF} "
        echo -e "${BROWN}$1${RED} module${CDEF}"
        exit 1
    fi
fi

. "${CWD}"/additional-scripts/settings.sh

SRCDIR="src"
# check exist source archives berore building packages
# (for x11-skel package source code not needed)
if [[ "${CHECK_PACKAGE_VERSION}" != "true" ]]; then
    SRCEXT=".tar.?z*"
    if [[ $# -eq 2 ]]; then
        if [[ "$2" != "x11-skel" ]]; then
            MISC=""
            [[ "$1" == "misc" ]] && MISC="/$2"
            ARCHDIR="${SRCDIR}/$1${MISC}"
            SOURCEARCH=$(find "${ARCHDIR}" -maxdepth 1 -type f \
                -name "$2-*${SRCEXT}")
            if [[ "x${SOURCEARCH}" == "x" ]]; then
                src_arch_not_found_mess "$2" "${ARCHDIR}"
                exit 1
            fi
        fi
    elif [[ $# -eq 1 ]]; then
        for LINE in ${QUEUELINES}; do
            MODULE=$(echo "${LINE}" | cut -d ":" -f 1)
            if [[ "${MODULE}" == "$1" ]]; then
                PKGNAME=$(echo "${LINE}" | cut -d ":" -f 2)
                if [[ "${PKGNAME}" != "x11-skel" ]]; then
                    MISC=""
                    [[ "${MODULE}" == "misc" ]] && MISC="/${PKGNAME}"
                    ARCHDIR="${SRCDIR}/${MODULE}${MISC}"
                    SOURCEARCH=$(find "${ARCHDIR}" -maxdepth 1 -type f \
                        -name "${PKGNAME}-*${SRCEXT}")
                    if [[ "x${SOURCEARCH}" == "x" ]]; then
                        src_arch_not_found_mess "${PKGNAME}" "${ARCHDIR}"
                        exit 1
                    fi
                fi
            fi
        done
    else
        for LINE in ${QUEUELINES}; do
            MODULE=$(echo "${LINE}" | cut -d ":" -f 1)
            PKGNAME=$(echo "${LINE}" | cut -d ":" -f 2)
            if [[ "${PKGNAME}" != "x11-skel" ]]; then
                MISC=""
                [[ "${MODULE}" == "misc" ]] && MISC="/${PKGNAME}"
                ARCHDIR="${SRCDIR}/${MODULE}${MISC}"
                SOURCEARCH=$(find "${ARCHDIR}" -maxdepth 1 -type f \
                    -name "${PKGNAME}-*${SRCEXT}")
                if [[ "x${SOURCEARCH}" == "x" ]]; then
                    src_arch_not_found_mess "${PKGNAME}" "${ARCHDIR}"
                    exit 1
                fi
            fi
        done
    fi

    # building m17n-lib package require m17n-db source archive
    if [[ $# -eq 0 || $# -eq 1 && "$1" == "misc" || \
            $# -eq 2 && "$1" == "misc" && "$2" == "m17n-lib" ]]; then
        M17NDIR="${SRCDIR}/misc/m17n-lib"
        M17NDB=$(find "${M17NDIR}" -maxdepth 1 -type f \
            -name "m17n-db-*${SRCEXT}")
        if [[ "x${M17NDB}" == "x" ]]; then
            src_arch_not_found_mess "m17n-db" "${M17NDIR}"
            exit
        fi
    fi
fi

. "${CWD}"/additional-scripts/flags.sh

# building packages
XDOWNLOAD="https://www.x.org/archive/individual"
for LINE in ${QUEUELINES}; do
    MODULE=$(echo "${LINE}" | cut -d ":" -f 1)
    # if module is specified
    [[ "x$1" != "x" && "$1" != "${MODULE}" ]] && continue

    PKGNAME=$(echo "${LINE}" | cut -d ":" -f 2)
    # if package name is specified
    [[ "x$2" != "x" && "$2" != "${PKGNAME}" ]] && continue

    BUILD=$(cat "${CWD}/build/${PKGNAME}")
    # if package already exist in ${OUTPUT} directory
    if [[ "${BUILD_ONLY_NOT_EXIST}" == "true" ]]; then
        BINPKG=$(find "${OUTPUT}/${MODULE}" -type f \
            -name "${PKGNAME}-[0-9]*-${BUILD}_${TAG}.${EXT}")
        if [[ "x${BINPKG}" != "x" ]]; then
            echo -e "${MAGENTA}Already exists: ${BROWN}${BINPKG}${CDEF}"
            continue
        fi
    fi

    # build packages from misc module
    if [[ "${MODULE}" == "misc" ]]; then
        (
            cd "${SRCDIR}/${MODULE}/${PKGNAME}" || exit 1
            sh build.sh
        )

        continue
    fi

    # build packages from other modules
    if [[ "${CHECK_PACKAGE_VERSION}" == "true" ]]; then
        # check latest release version
        echo -en "${GREY}Check ${CYAN}${PKGNAME}${GREY} latest release:${CDEF} "
        VERSION=$(wget -q -O - "${XDOWNLOAD}/${MODULE}" | grep "${PKGNAME}-" | \
            grep 'tar.bz2"' | grep -v "\-rc[0-9]" | cut -d \" -f 8 | rev | \
            cut -d - -f 1 | cut -d . -f 3- | rev | sort -V | tail -n 1)
        echo "${VERSION}"
        SOURCE="${PKGNAME}-${VERSION}.tar.bz2"

        # download source archive if does not exist
        if ! [ -r "${SRCDIR}/${MODULE}/${SOURCE}" ]; then
            echo -e "${YELLOW}Downloading ${SOURCE} source archive${CDEF}"
            (
                cd "${SRCDIR}/${MODULE}" || exit 1
                wget "${XDOWNLOAD}/${MODULE}/${SOURCE}"
            )
        fi
    else
        SOURCE=$(find "${SRCDIR}/${MODULE}" -type f \
            -name "${PKGNAME}-[0-9]*.tar.?z*" | rev | cut -d / -f 1 | rev)
        VERSION=$(echo "${SOURCE}" | rev | cut -d - -f 1 | cut -d . -f 3- | rev)
    fi

    [[ "${ONLY_DOWNLOAD}" == "true" ]] && continue

    TMP="${TEMP}/${MODULE}"
    PKG="${TMP}/package-${PKGNAME}"

    rm -rf "${PKG}"
    mkdir -p "${PKG}"
    cd "${TMP}" || exit 1
    rm -rf "${PKGNAME}-${VERSION}"
    tar xvf "${CWD}/${SRCDIR}/${MODULE}/${SOURCE}"
    cd "${PKGNAME}-${VERSION}" || exit 1
    . "${CWD}"/additional-scripts/setperm.sh

    # if any patches are needed, call this script to apply them
    PKGPATCH="${CWD}/patches/${PKGNAME}.sh"
    if [ -r "${PKGPATCH}" ]; then
        . "${PKGPATCH}"
    fi

    # ./configure using custom configure script if needed,
    # otherwise use default configure script
    CONFIGURE="${CWD}/configure/${PKGNAME}.sh"
    ! [ -r "${CONFIGURE}" ] && CONFIGURE="${CWD}/configure/configure.sh"
    . "${CONFIGURE}"

    make "${NUMJOBS}" || make || exit 1
    make install DESTDIR="${PKG}"

    . "${CWD}"/additional-scripts/strip-binaries.sh
    . "${CWD}"/additional-scripts/copydocs.sh
    . "${CWD}"/additional-scripts/compressmanpages.sh

    # if there's any special post-install things to do, do them:
    POSTINSTALL="${CWD}/post-install/${PKGNAME}.sh"
    if [ -r "${POSTINSTALL}" ]; then
        RUNSCRIPT=$(mktemp -p "${TMP}")
        sed -e "s#usr/lib#usr/lib${LIBDIRSUFFIX}#g" \
            "${POSTINSTALL}" > "${RUNSCRIPT}"
        . "${RUNSCRIPT}"
        rm -f "${RUNSCRIPT}"
    fi

    mkdir -p "${PKG}"/install
    cat "${CWD}/slack-desc/${PKGNAME}" > "${PKG}/install/slack-desc"

    # if this package requires some doinst.sh, add it here
    DOINSTALL="${CWD}/doinst.sh/${PKGNAME}"
    if [ -r "${DOINSTALL}"  ]; then
        sed -e "s#usr/lib#usr/lib${LIBDIRSUFFIX}#g" "${DOINSTALL}" >> \
            "${PKG}/install/doinst.sh"
    fi

    PKGARCH="${ARCH}"
    if grep -Eq "^${PKGNAME}$" "${CWD}/noarch"; then
        PKGARCH="noarch"
    fi

    # make package
    cd "${PKG}" || exit 1
    OUTPUTMOD="${OUTPUT}/${MODULE}"
    mkdir -p "${OUTPUTMOD}"
    PKG="${OUTPUTMOD}/${PKGNAME}-${VERSION}-${PKGARCH}-${BUILD}_${TAG}.${EXT}"
    rm -f "${PKG}"
    makepkg -l y -c n "${PKG}"

    if [[ "${INSTALL_AFTER_BUILD}" == "true" ]]; then
        upgradepkg --install-new --reinstall "${PKG}"
    fi

    cd "${CWD}" || exit 1
done
